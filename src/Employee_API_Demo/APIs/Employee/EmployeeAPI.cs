using Newtonsoft.Json;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace HRM_API_Demo.APIs.Employee
{
    /// <summary>
    /// Wrapper-class for the Employee-API
    /// </summary>
    public class EmployeeAPI : API
    {
        /// <summary>
        /// The base-URI to the Employee-API. 
        /// </summary>
        private const string BASE_URL = "https://employeeapi.employeecore.hrm.visma.net";

        /// <summary>
        /// The functionality implemented in this wrapper requires the following API-scopes.
        /// </summary>
        protected override string GetRequiredScopes()
        {
            return "visma_net_employee:employees:read visma_net_employee:employees:write";
        }

        /// <summary>
        /// Executes the API-call to get a list of employees.
        /// </summary>
        /// <returns>A list of employees (class EmployeeData generated by Visual Studio based on swagger-documentation)</returns>
        public async Task<EmployeeData[]> GetEmployees()
        {
            using (var client = new HttpClient())
            {
                using (var request = new HttpRequestMessage(HttpMethod.Get, BASE_URL + "/v0/employees"))
                {
                    request.Headers.Add("Authorization", "Bearer " + await GetToken());
                    request.Headers.Add("Accept", "application/json");

                    var response = await client.SendAsync(request);
                    response.EnsureSuccessStatusCode();

                    var values = JsonConvert.DeserializeObject<EmployeeRootobject>(await response.Content.ReadAsStringAsync());

                    return values.data;
                }
            }
        }

        /// <summary>
        /// Executes the API-call to get a single employee from the API.
        /// </summary>
        /// <param name="employeeId">The id (GUID) of the employee to get</param>
        /// <returns>The employee (class EmployeeData generated by Visual Studio based on swagger-documentation)</returns>
        public async Task<EmployeeData> GetEmployee(string employeeId)
        {
            using (var client = new HttpClient())
            {
                using (var request = new HttpRequestMessage(HttpMethod.Get, BASE_URL + "/v0/employees/" + employeeId))
                {
                    request.Headers.Add("Authorization", "Bearer " + await GetToken());
                    request.Headers.Add("Accept", "application/json");

                    var response = await client.SendAsync(request);
                    response.EnsureSuccessStatusCode();

                    var values = JsonConvert.DeserializeObject<EmployeeData>(await response.Content.ReadAsStringAsync());

                    return values;
                }
            }
        }

        /// <summary>
        /// Executes the API-call to get a list of positions for a single employee from the API.
        /// </summary>
        /// <param name="employeeId">The id (GUID) of the employee to get positions for</param>
        /// <returns>A list of posiotions (class Position generated by Visual Studio based on swagger-documentation)</returns>
        public async Task<Position[]> GetPositions(string employeeId)
        {
            using (var client = new HttpClient())
            {
                using (var request = new HttpRequestMessage(HttpMethod.Get, BASE_URL + "/v0/employees/" + employeeId + "/positions"))
                {
                    request.Headers.Add("Authorization", "Bearer " + await GetToken());
                    request.Headers.Add("Accept", "application/json");

                    var response = await client.SendAsync(request);
                    response.EnsureSuccessStatusCode();

                    var values = JsonConvert.DeserializeObject<List<Position>>(await response.Content.ReadAsStringAsync());

                    return values.ToArray();
                }
            }
        }

        /// <summary>
        /// Executes the API-call to create an employee with positions to the APIs.
        /// </summary>
        /// <param name="employee">The employee-data.</param>
        /// <returns>The URI for the job created on the server</returns>
        public async Task<string> CreateEmployee(EmployeeData employee)
        {
            using (var client = new HttpClient())
            {
                using (var request = new HttpRequestMessage(HttpMethod.Post, BASE_URL + "/v0/employees/withPosition"))
                {
                    request.Headers.Add("Authorization", "Bearer " + await GetToken());
                    request.Headers.Add("Accept", "application/json");

                    request.Content = new StringContent(JsonConvert.SerializeObject(employee, new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore }), Encoding.UTF8, "application/json");

                    var response = await client.SendAsync(request);
                    response.EnsureSuccessStatusCode();

                    if (response.StatusCode == System.Net.HttpStatusCode.Accepted) //When successful the call return HTTP-202:Accepted. This is because the job i run async on the server.
                    {
                        return response.Headers.Location.ToString(); //The URI to get the status of the Job is returned in the Location-header.
                    }
                    else
                        return "Error";
                }
            }
        }

        /// <summary>
        /// Executes the API-call to get the status of a job from the API.
        /// </summary>
        /// <param name="jobPath">The URI to the job to check</param>
        /// <returns>Information about the job (class Job generated by Visual Studio based on swagger-documentation)</returns>
        public async Task<Job> GetJob(string jobPath)
        {
            using (var client = new HttpClient())
            {
                using (var request = new HttpRequestMessage(HttpMethod.Get, BASE_URL + jobPath))
                {
                    request.Headers.Add("Authorization", "Bearer " + await GetToken());
                    request.Headers.Add("Accept", "application/json");

                    var response = await client.SendAsync(request);
                    response.EnsureSuccessStatusCode();

                    var values = JsonConvert.DeserializeObject<Job>(await response.Content.ReadAsStringAsync());

                    return values;
                }
            }
        }
    }
}
